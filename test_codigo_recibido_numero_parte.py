#!/usr/bin/env python3
"""
Script para probar la correcci√≥n del c√≥digo de material recibido
Ahora debe usar n√∫mero de parte en lugar del c√≥digo de material
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.db import agregar_control_material_almacen
from app.config_mysql import execute_query
from datetime import datetime, timedelta

def test_codigo_material_recibido():
    """Probar que el c√≥digo recibido use n√∫mero de parte"""
    
    print("=== PRUEBA DE C√ìDIGO MATERIAL RECIBIDO CON N√öMERO DE PARTE ===")
    
    # Obtener informaci√≥n de un material existente
    print(f"\n1. CONSULTANDO MATERIAL EXISTENTE...")
    
    result = execute_query("""
        SELECT codigo_material, numero_parte, especificacion_material
        FROM materiales 
        WHERE numero_parte IS NOT NULL AND numero_parte != ''
        ORDER BY codigo_material DESC 
        LIMIT 1
    """, fetch='one')
    
    if not result:
        print("‚ùå No se encontr√≥ material con n√∫mero de parte")
        return
    
    codigo_material = result['codigo_material']
    numero_parte = result['numero_parte']
    especificacion = result['especificacion_material'] or 'Test material'
    
    print(f"   C√≥digo de material: {codigo_material}")
    print(f"   N√∫mero de parte:    {numero_parte}")
    print(f"   Especificaci√≥n:     {especificacion}")
    
    # Simular datos como vienen del frontend
    utc_now = datetime.utcnow()
    mexico_time = utc_now - timedelta(hours=6)
    fecha_hoy = mexico_time.strftime('%Y-%m-%d')
    
    print(f"\n2. DATOS DE PRUEBA:")
    print(f"   Fecha actual M√©xico: {mexico_time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    material_data = {
        "forma_material": "DIODO",
        "cliente": "ILSAN_ELECTRONICS", 
        "codigo_material_original": codigo_material,  # Usar c√≥digo real
        "codigo_material": codigo_material,           # Usar c√≥digo real
        "material_importacion_local": "LOCAL",
        "fecha_recibo": fecha_hoy,
        "fecha_fabricacion": fecha_hoy,
        "cantidad_actual": 100,
        "numero_lote_material": "LOTE_CODIGO_TEST_001",
        "codigo_material_recibido": "",  # Dejar vac√≠o para que se genere autom√°ticamente
        "numero_parte": numero_parte,     # Deber√≠a usar este valor
        "cantidad_estandarizada": 100,
        "codigo_material_final": f"{codigo_material}_FINAL",
        "propiedad_material": "Prueba n√∫mero de parte en c√≥digo recibido",
        "especificacion": especificacion,
        "material_importacion_local_final": "LOCAL",
        "estado_desecho": False,
        "ubicacion_salida": "ALMACEN_PRINCIPAL"
    }
    
    print(f"\n3. REGISTRANDO MATERIAL...")
    print(f"   Esperamos que el c√≥digo recibido contenga: '{numero_parte}' (no '{codigo_material}')")
    
    try:
        # Registrar el material
        resultado = agregar_control_material_almacen(material_data)
        
        if resultado:
            print(f"   ‚úÖ Material registrado exitosamente")
            
            # Verificar c√≥mo se guard√≥ el c√≥digo recibido
            print(f"\n4. VERIFICANDO C√ìDIGO RECIBIDO GENERADO...")
            
            result = execute_query("""
                SELECT codigo_material_recibido, numero_parte, codigo_material_original
                FROM control_material_almacen 
                WHERE codigo_material_original = %s
                ORDER BY id DESC LIMIT 1
            """, (codigo_material,), fetch='one')
            
            if result:
                codigo_recibido = result['codigo_material_recibido']
                numero_parte_guardado = result['numero_parte']
                codigo_original = result['codigo_material_original']
                
                print(f"   üìã RESULTADO EN BASE DE DATOS:")
                print(f"      C√≥digo original:    {codigo_original}")
                print(f"      N√∫mero de parte:    {numero_parte_guardado}")
                print(f"      C√≥digo recibido:    {codigo_recibido}")
                
                # Verificar que el c√≥digo recibido contenga el n√∫mero de parte
                print(f"\n5. VALIDACI√ìN:")
                
                if numero_parte in codigo_recibido:
                    print(f"   ‚úÖ El c√≥digo recibido contiene el n√∫mero de parte: '{numero_parte}'")
                    
                    # Verificar que NO contenga el c√≥digo de material
                    if codigo_material not in codigo_recibido:
                        print(f"   ‚úÖ El c√≥digo recibido NO contiene el c√≥digo de material: '{codigo_material}'")
                        print(f"   üéâ CORRECCI√ìN EXITOSA: Se usa n√∫mero de parte en lugar de c√≥digo de material")
                    else:
                        print(f"   ‚ùå El c√≥digo recibido a√∫n contiene el c√≥digo de material: '{codigo_material}'")
                        
                else:
                    print(f"   ‚ùå El c√≥digo recibido NO contiene el n√∫mero de parte: '{numero_parte}'")
                    
                    if codigo_material in codigo_recibido:
                        print(f"   ‚ùå El c√≥digo recibido a√∫n usa el c√≥digo de material: '{codigo_material}'")
                        print(f"   ‚ö†Ô∏è La correcci√≥n NO funcion√≥ correctamente")
                        
            else:
                print(f"   ‚ùå No se encontr√≥ el registro reci√©n guardado")
                
        else:
            print(f"   ‚ùå Error al registrar el material")
            
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_codigo_material_recibido()
